"""
Pipeline RAG optimizado con selecci√≥n basada en reglas.
"""

import logging
from app.services.rag.schema_selector import SchemaSelector
from app.services.chart_detector import ChartDetector

logger = logging.getLogger(__name__)


class RAGPipeline:
    """Pipeline RAG para text-to-SQL con detecci√≥n de gr√°ficos"""

    def __init__(self, db_service):
        self.db_service = db_service
        self.schema_selector = SchemaSelector(db_service)
        self.chart_detector = ChartDetector()
        logger.info("‚úÖ RAG Pipeline inicializado correctamente")

    def retrieve_relevant_schema(self, natural_language_query: str) -> str:
        """Recupera el esquema relevante para la consulta"""
        try:
            return self.schema_selector.build_schema_context(natural_language_query)
        except Exception as e:
            logger.error(f"‚ùå Error recuperando esquema: {e}")
            raise

    def enhance_prompt_with_rag(self, natural_language_query: str) -> str:
        """Mejora el prompt con contexto RAG y detecci√≥n de gr√°ficos"""
        # Obtener contexto del esquema
        schema_context = self.retrieve_relevant_schema(natural_language_query)

        # Detectar requisitos de gr√°fico
        chart_requirements = self.chart_detector.predict(
            natural_language_query, schema_context
        )

        logger.info(
            "üîç Generando prompt enriquecido con RAG para la consulta: '%s' (necesita gr√°fico: %s, tipo: %s)",
            natural_language_query,
            chart_requirements["needs_chart"],
            chart_requirements["chart_type"],
        )

        enhanced_prompt = f"""
# CONTEXTO DE BASE DE DATOS (ESQUEMA ESTRICTO)
{schema_context}

# REQUISITOS DE VISUALIZACI√ìN
- Necesita gr√°fico: {chart_requirements['needs_chart']}
- Tipo de gr√°fico sugerido: {chart_requirements['chart_type']}
- Confianza: {chart_requirements['confidence']}
- Raz√≥n: {chart_requirements['reasoning']}

# INSTRUCCIONES GENERALES
Eres un experto en PostgreSQL y visualizaci√≥n de datos. Tu tarea es generar una consulta SQL **v√°lida y ejecutable** en PostgreSQL, basada **exclusivamente** en el esquema proporcionado.

# REGLAS CR√çTICAS (OBLIGATORIAS)
1. **Usa SOLO** las tablas y columnas mencionadas en el esquema del contexto.  
   - Si el esquema no incluye una columna o tabla, **no la inventes** ni la derives.
   - Si no hay suficiente informaci√≥n para responder, **devuelve un error controlado** (ver m√°s abajo).
2. Usa los nombres exactos de tablas y columnas tal como aparecen en el esquema.
3. Si la consulta requiere un JOIN, solo usa relaciones foreign key inferibles del esquema.
4. Optimiza para rendimiento, pero prioriza exactitud sobre optimizaci√≥n.
5. Considera los requisitos de visualizaci√≥n (tipo de gr√°fico, ejes, categor√≠as, etc.)
6. No uses alias o funciones sobre columnas inexistentes.
7. No inventes m√©tricas o agregaciones no justificadas.

# MANEJO DE ERRORES
Si la consulta no puede generarse sin violar las reglas anteriores, responde con el siguiente formato de error JSON:

{{
    "error": "No se puede generar la consulta sin inventar columnas o tablas fuera del esquema provisto.",
    "reason": "Explicaci√≥n breve del motivo."
}}

# FORMATO DE RESPUESTA (CR√çTICO)
**Responde EXCLUSIVAMENTE con JSON v√°lido (sin markdown, sin ```json, sin texto adicional):**

{{
    "sql_query": "Consulta SQL aqu√≠",
    "needs_chart": {str(chart_requirements['needs_chart']).lower()},
    "chart_type": "bar|line|scatter|pie|histogram|area|box_plot|null",
    "chart_fields": {{
        "x_axis": "nombre_columna_x o null",
        "category_field": "nombre_columna_categoria o null",
        "color_field": "nombre_columna_color o null",
        "chart_code": "c√≥digo Python completo usando matplotlib o seaborn para generar el gr√°fico, o null si no necesita gr√°fico"
    }},
    "confidence_score": 0.95,
    "tables_used": ["tabla1", "tabla2"],
    "title": "Titulo sugerido de la consulta"
}}

# ESPECIFICACIONES DE CAMPOS PARA GR√ÅFICOS
- bar chart: x_axis = categor√≠a
- line chart: x_axis = temporal
- scatter plot: x_axis = num√©rico, necesita dos columnas num√©ricas
- pie chart: x_axis = categor√≠a
- histogram: x_axis = num√©rico
- area chart: x_axis = temporal
- box_plot: x_axis = categor√≠a (opcional)
- null: cuando no se necesita gr√°fico

# ESPECIFICACIONES PARA chart_code
Cuando needs_chart es true, debes generar c√≥digo Python completo que:
1. Asume que existe un DataFrame llamado `df` con los datos de la consulta SQL
2. Usa matplotlib.pyplot (importado como plt) o seaborn (importado como sns)
3. Crea una figura con tama√±o apropiado: plt.figure(figsize=(10, 6))
4. Configura t√≠tulos, etiquetas de ejes y leyendas apropiadas
5. Aplica estilo profesional (grid, colores, etc.)
6. NO incluye plt.show() al final (ser√° manejado externamente)
7. Maneja valores nulos o vac√≠os apropiadamente

Ejemplo de chart_code para un bar chart:
"import matplotlib.pyplot as plt\\nimport seaborn as sns\\n\\nplt.figure(figsize=(10, 6))\\nsns.barplot(data=df, x='categoria', y='valor')\\nplt.title('T√≠tulo del Gr√°fico')\\nplt.xlabel('Categor√≠a')\\nplt.ylabel('Valor')\\nplt.xticks(rotation=45)\\nplt.tight_layout()"

Ejemplo de chart_code para un line chart:
"import matplotlib.pyplot as plt\\n\\nplt.figure(figsize=(12, 6))\\nplt.plot(df['fecha'], df['valor'], marker='o', linewidth=2)\\nplt.title('T√≠tulo del Gr√°fico')\\nplt.xlabel('Fecha')\\nplt.ylabel('Valor')\\nplt.grid(True, alpha=0.3)\\nplt.xticks(rotation=45)\\nplt.tight_layout()"

# NOTAS DE IMPLEMENTACI√ìN
- La consulta ser√° ejecutada en PostgreSQL.
- El campo chart_code contendr√° c√≥digo Python listo para ejecutar sobre el DataFrame resultante.
- x_axis debe corresponder a una columna real del DataFrame (derivada directamente de columnas del esquema).
- El c√≥digo del gr√°fico debe ser robusto y manejar casos edge (datos vac√≠os, valores nulos, etc.).

# CONSULTA DEL USUARIO
"{natural_language_query}"
"""

        return enhanced_prompt

    def update_schema(self):
        """Actualiza el esquema (reconstruye √≠ndices)"""
        try:
            logger.info("üîÑ Actualizando √≠ndices de esquema...")
            self.schema_selector._build_indexes()
            logger.info("‚úÖ √çndices actualizados correctamente")
        except Exception as e:
            logger.error(f"‚ùå Error actualizando esquema: {e}")
            raise
